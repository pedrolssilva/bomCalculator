package bomcalculator;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class UI_BomCalculator extends javax.swing.JFrame {

    public UI_BomCalculator() {
        initComponents();
        btnGerarTestes.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtCaminhoTestOrder = new javax.swing.JTextField();
        btnGerarTestes = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();
        lblMsg = new javax.swing.JLabel();
        lblQuantdadePlacas = new javax.swing.JLabel();
        txtQuantidadePlacas = new javax.swing.JTextField();
        btnPathTestorder = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BOM Calculator for i3070");
        setIconImages(null);

        txtCaminhoTestOrder.setEditable(false);
        txtCaminhoTestOrder.setToolTipText("Caminho para o arquivo \"TestOrder\"");

        btnGerarTestes.setText("Gerar Testes");
        btnGerarTestes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGerarTestesActionPerformed(evt);
            }
        });

        btnSair.setText("Sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        lblQuantdadePlacas.setText("Quantidade de placas:");

        btnPathTestorder.setText("Caminho para o TestOrder:");
        btnPathTestorder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPathTestorderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCaminhoTestOrder)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblQuantdadePlacas)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtQuantidadePlacas, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40)
                                        .addComponent(btnGerarTestes))
                                    .addComponent(lblMsg))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSair))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnPathTestorder)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnPathTestorder)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSair)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCaminhoTestOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblQuantdadePlacas)
                            .addComponent(txtQuantidadePlacas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGerarTestes))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblMsg)
                        .addGap(0, 33, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnSairActionPerformed

    private void btnGerarTestesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGerarTestesActionPerformed

        //Cria variáveis:
        String testOrder[][] = new String[30000][30]; //Guarda as informações do board
        ArrayList<String> componente = new ArrayList<>();  //Guarda as informações do componente
        String path = "";
        int quantidadePlacas = 0;   // para guardar o caminho para o board
        String classe = "";
        btnGerarTestes.setEnabled(false);

        //Zera as variaveis:
        lblMsg.setText("");
        testOrder = null;
        componente.clear();

        //Verificar se txtCaminhoTestOrder está vazio:
        if (txtCaminhoTestOrder.getText().isEmpty()) {
            lblMsg.setText("O caminho para o board está vazio!");
            btnGerarTestes.setEnabled(true);
            return;
        }

        //Verificar se txtQuantidadePlacas está vazio:       
        if (txtQuantidadePlacas.getText().isEmpty()) {
            lblMsg.setText("Informe o numero de placas a serem testadas!");
            btnGerarTestes.setEnabled(true);
            return;
        }
        //Verificar se txtQuantidadePlacas é numero: 
        char[] verificaSeEhNumero = txtQuantidadePlacas.getText().toCharArray();
        boolean ehNumero = true;
        for (int i = 0; i < verificaSeEhNumero.length; i++) {
            if (Character.isAlphabetic(verificaSeEhNumero[i])) {
                ehNumero = false;
                lblMsg.setText("O valor inserido para a Qauntidade de Placas não é um número.");
                btnGerarTestes.setEnabled(true);
                return;
            }
        }   

        //Armazena o caminho indicados pelo usuário:
        path = txtCaminhoTestOrder.getText()+"\\";

        //Armazena a quantidade de placas:
        quantidadePlacas = Integer.valueOf(txtQuantidadePlacas.getText());
        //int linha = 1520;
        
        lblMsg.setText("Criando arquivos de Compile e Link...");
        //Criar arquivos 'CompModifyAnalog", "CompModifyCompile" e "CompModifyLink"             
        File CompModifyCompile = new File(path+"CompModifyCompile");
        File CompModifyLink = new File(path+"CompModifyLink");
        if (!CompModifyCompile.exists()) {
            try {
                CompModifyCompile.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(UI_BomCalculator.class.getName()).log(Level.SEVERE, null, ex);
            }
        }        
        if (!CompModifyLink.exists()) {
            try {
                CompModifyLink.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(UI_BomCalculator.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        lblMsg.setText("Arquivos de Compile e Link criados!");
        
        //Armazena os dados do TestOrder no array testOrder:
        lblMsg.setText("Lendo arquivo TestOrder e gerando parâmetros...");
        try {            
            testOrder = ManipuladorArquivo.leitorTestOrder(path + "testorder");
            JOptionPane.showMessageDialog(rootPane, testOrder, "Informação", JOptionPane.INFORMATION_MESSAGE);            
        } catch (IOException ex) {
            Logger.getLogger(UI_BomCalculator.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Se nao é multiboard:
        if (quantidadePlacas == 1) {
            //Faz a leitura do componente e reescreve o teste:
            for (int linha = 0; linha < testOrder.length; linha++) {
                lblMsg.setText("Reescrevendo o teste para o componente: " + testOrder[linha][2]);
                //Faz a leitura do componentes de acordo com a versao:
                if ((testOrder[linha][0].equals("test") && testOrder[linha].length > 3) && (testOrder[linha][1].equals("resistor") || testOrder[linha][1].equals("capacitor"))) {
                    if (!testOrder[linha][2].equals(".discharge")) {
                        //Se tem versao vai para o caminho da versão:
                        if (testOrder[linha][3].equals("version")) {
                            try {
                                componente = ManipuladorArquivo.leitorComponente(path + "\\" + testOrder[linha][4] + "\\analog\\" + testOrder[linha][2]);
                            } catch (IOException ex) {
                                Logger.getLogger(UI_BomCalculator.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            classe = testOrder[linha][1];
                            try {
                                ManipuladorArquivo.escritorComponente(path + "\\" + testOrder[linha][4] + "\\analog\\" + testOrder[linha][2], componente, testOrder[linha][2], classe);
                            } catch (IOException ex) {
                                Logger.getLogger(UI_BomCalculator.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                        //Se NÃO tem versao vai para o caminho padrão:
                        if (!testOrder[linha][3].equals("version")) {
                            try {
                                componente = ManipuladorArquivo.leitorComponente(path + "\\analog\\" + testOrder[linha][2]);
                            } catch (IOException ex) {
                                Logger.getLogger(UI_BomCalculator.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            classe = testOrder[linha][1];
                            try {
                                ManipuladorArquivo.escritorComponente(path + "\\analog\\" + testOrder[linha][2], componente, testOrder[linha][2], classe);
                            } catch (IOException ex) {
                                Logger.getLogger(UI_BomCalculator.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                    }
                } //Se NÃO tem coluna de info "version" vai para o caminho padrão:
                else if ((testOrder[linha][0].equals("test") && testOrder[linha].length <= 3) && (testOrder[linha][1].equals("resistor") || testOrder[linha][1].equals("capacitor"))) {
                    if (!testOrder[linha][2].equals(".discharge")) {
                        try {
                            componente = ManipuladorArquivo.leitorComponente(path + "\\analog\\" + testOrder[linha][2]);
                        } catch (IOException ex) {
                            Logger.getLogger(UI_BomCalculator.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        classe = testOrder[linha][1];
                        try {
                            ManipuladorArquivo.escritorComponente(path + "\\analog\\" + testOrder[linha][2], componente, testOrder[linha][2], classe);
                        } catch (IOException ex) {
                            Logger.getLogger(UI_BomCalculator.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }            
        }  
        
        //Escreve o arquivo CompModifyCompile de acordo com a versão e quantidade de placas a partir do testOrder:
        lblMsg.setText("Escrevendo arquivo \"CompModifyCompile\"...");
            try {
                
                ManipuladorArquivo.escritorArquivoModififyCompile(path, testOrder, quantidadePlacas);
                lblMsg.setText("Arquivo \"CompModifyCompile\" finalizado.");
            } catch (IOException ex) {
                Logger.getLogger(UI_BomCalculator.class.getName()).log(Level.SEVERE, null, ex);
            }
         
        //Se houver mais de uma placa no software (MULTIBOARD):
        if (quantidadePlacas > 1) {
            //Faz a leitura do componente e reescreve o teste para a quantidade de placas no fixture:
            for (int countPlacas = 1; countPlacas <= 1 /*mudar aqui se formos escrever em todas as placas */; countPlacas++) {

                //Faz a leitura do componente e reescreve o teste:
                for (int linha = 0; linha < testOrder.length; linha++) {
                    lblMsg.setText("Reescrevendo o teste para o componente: "+countPlacas+"%" + testOrder[linha][2]);
                    //Faz a leitura do componentes de acordo com a versao:
                    if ((testOrder[linha][0].equals("test") && testOrder[linha].length > 3) && (testOrder[linha][1].equals("resistor") || testOrder[linha][1].equals("capacitor"))) {
                        if (!testOrder[linha][2].equals(".discharge")) {
                            //Se tem versao vai para o caminho da versão:
                            if (testOrder[linha][3].equals("version")) {
                                try {
                                    componente = ManipuladorArquivo.leitorComponente(path + "\\" + testOrder[linha][4] + "\\analog\\" + countPlacas+"%" + testOrder[linha][2]);
                                } catch (IOException ex) {
                                    Logger.getLogger(UI_BomCalculator.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                classe = testOrder[linha][1];
                                try {
                                    ManipuladorArquivo.escritorComponente(path + "\\" + testOrder[linha][4] + "\\analog\\" + countPlacas+"%" + testOrder[linha][2], componente, testOrder[linha][2], classe);
                                } catch (IOException ex) {
                                    Logger.getLogger(UI_BomCalculator.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }

                            //Se NÃO tem versao vai para o caminho padrão:
                            if (!testOrder[linha][3].equals("version")) {
                                try {
                                    componente = ManipuladorArquivo.leitorComponente(path + "\\analog\\" + countPlacas+"%" + testOrder[linha][2]);
                                } catch (IOException ex) {
                                    Logger.getLogger(UI_BomCalculator.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                classe = testOrder[linha][1];
                                try {
                                    ManipuladorArquivo.escritorComponente(path + "\\analog\\" + countPlacas+"%" + testOrder[linha][2], componente, testOrder[linha][2], classe);
                                } catch (IOException ex) {
                                    Logger.getLogger(UI_BomCalculator.class.getName()).log(Level.SEVERE, null, ex);
                                }

                            }
                        }
                    } //Se NÃO tem coluna de info "version" vai para o caminho padrão:
                    else if ((testOrder[linha][0].equals("test") && testOrder[linha].length <= 3) && (testOrder[linha][1].equals("resistor") || testOrder[linha][1].equals("capacitor"))) {
                        if (!testOrder[linha][2].equals(".discharge")) {
                            try {
                                componente = ManipuladorArquivo.leitorComponente(path + "\\analog\\" + countPlacas+"%" + testOrder[linha][2]);
                            } catch (IOException ex) {
                                Logger.getLogger(UI_BomCalculator.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            classe = testOrder[linha][1];
                            try {
                                ManipuladorArquivo.escritorComponente(path + "\\analog\\" + countPlacas+"%" + testOrder[linha][2], componente, testOrder[linha][2], classe);
                            } catch (IOException ex) {
                                Logger.getLogger(UI_BomCalculator.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
            }
            
            //Escreve o arquivo de link:
            lblMsg.setText("Escrevendo arquivo \"CompModifyLink\"...");
            try {                
                ManipuladorArquivo.escritorArquivoCompModifyLink(path, testOrder, quantidadePlacas);
                lblMsg.setText("Arquivo \"CompModifyLink\" finalizado.");
            } catch (IOException ex) {
                Logger.getLogger(UI_BomCalculator.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //Fim da porra toda.
        lblMsg.setText("Processo finalizado!");


    }//GEN-LAST:event_btnGerarTestesActionPerformed

    private void btnPathTestorderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPathTestorderActionPerformed
        
        btnPathTestorder.addActionListener(new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    JFileChooser diretorio = new JFileChooser();
                    // restringe a amostra a diretorios apenas
                    diretorio.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                    int res = diretorio.showOpenDialog(null);
                    if(res == JFileChooser.APPROVE_OPTION){
                        btnGerarTestes.setEnabled(true);
                        //File diretorio1 = diretorio.getSelectedFile();
                        //JOptionPane.showMessageDialog(null, "Voce escolheu o diretório: " + diretorio.getName());
                        txtCaminhoTestOrder.setText(diretorio.getSelectedFile().getAbsoluteFile().toString());
                        txtCaminhoTestOrder.setEnabled(false);
                        
                    }
                    else
                        JOptionPane.showMessageDialog(null, "Voce nao selecionou nenhum diretorio.");
                }
            });
    }//GEN-LAST:event_btnPathTestorderActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI_BomCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI_BomCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI_BomCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI_BomCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI_BomCalculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGerarTestes;
    private javax.swing.JButton btnPathTestorder;
    private javax.swing.JButton btnSair;
    private javax.swing.JLabel lblMsg;
    private javax.swing.JLabel lblQuantdadePlacas;
    private javax.swing.JTextField txtCaminhoTestOrder;
    private javax.swing.JTextField txtQuantidadePlacas;
    // End of variables declaration//GEN-END:variables
}
